#BlackJack Project
#by Alex Perez

This blackjack game is based on the classic card game in which two or or more players
will take a shuffled deck of cards, each initially receiving two cards each.
Each card is assigned a specific value, the numbered cards with a value of 2-10, the face cards
a value of 10 each, and the Ace with a variable value of 1 or 11.  

A player will win a round of play, if he/she scores more points than their opponent WITHOUT going over 21.
A player will also win if he/she scores 21. A player will lose if he/she goes over 21.

After the initial dealing of two cards per player, the player will be given
the opportunity to "hit" or get more cards, or "stand" and draw no more cards.
The dealer shall also have the opportunity to hit or stand. Each side may hit or stand as long
as they are below 21. If neither side has "busted," or gone beyond 21, then each side will reveal their cards,
the side with the superior value will win the round.

My implementation of this game used 6 classes - card, deck, hand, player, blackjack (the game engine) as well as a game launcher.
I also used two enum classes of Suit and Rank.

This project used array lists, and the various methods inherent to them, such as get, add, remove, and shuffle.

The cards, which were the basis of the hands and decks, were created using enums.
The deck was created by creating an array list of cards, and then using two loops to add 52 cards to it.
I took a loop of suits (4 of them) and then within that loop, loop the ranks (13 of them), and then add them to the array.

I then used Collections.shuffle (called via a method) to randomize the deck, create it, (called workingdeck) and then created empty hands for the player and the dealer.

From there, I used a draw method (which uses .add and .remove) to get cards from our working deck, into our hands (player's and dealer's).

I calculated the value of the hands, using a method that contained a switch. Each rank was assigned a value, and returned that value. For the ace, I used a loop to vary
the value of the ace. If there were 1 ace in a hand, it would equal 11, unless the total value of the hand before the ace were greater than 10, then it would equal 1. This would
mean that the ace would not "bust" the player, just give him a +1 value to his hand.  In the case of two or more aces, the first ace would be an 11, the second and third ones.

Back to the "guts," of the game, sees his two cards, but only sees one of the dealer's. He then has the option to hit or stand. Hit meaning get more cards, stand meaning taking no more cards.
If the player hits, he again draws from the working deck, and the value of his new hand is displayed. He can then keep on hitting until he busts or stands.
If he busts, he immediately loses the round.

If he doesn't bust, then we will compare the values of the dealer's hand and the player's hand.
Whomever has the greater hand will win the round. Based on that, the player will gain or lose chips. Gain if he wins, loses them if he loses. 
The player will bet before each round, and the game is over, if he loses all his chips.

In the event of a tie, meaning he value of the hands are equal, the player will neither gain nor lose chips, just go onto the next round.

I created a "round over" boolean value to end each round. It is initially set to false, but will turn true when a win/loss or tie condition is met.
Afterwards, the player is then promoted to bet again, and the dealer and player will get two more cards.

The game would cause an error when I ran out of cards, because we are removing cards from the working deck. I worked around it by using a "deck recylcing method," moving the used cards from the hands back into the working deck and then shuffling 
it, thus we will always have a randomized working deck.  

  
